// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp.Repositories.EntityFramework.Concrete.Contexts;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250331145047_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiService.Entities.Concrete.AppEntities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FalseEntryCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 31, 17, 50, 46, 785, DateTimeKind.Local).AddTicks(8262),
                            CreatedUserName = "Seed Data",
                            EmailConfirmed = true,
                            FalseEntryCount = 0,
                            IsActive = true,
                            IsBlocked = false,
                            ModifiedDate = new DateTime(2025, 3, 31, 17, 50, 46, 785, DateTimeKind.Local).AddTicks(8265),
                            ModifiedUserName = "Seed Data",
                            UserEmail = "berkayakar@gmail.com",
                            UserFullName = "Berkay AKAR",
                            UserName = "berkayakar",
                            UserPassword = "A665A45920422F9D417E4867EFDC4FB8A04A1F3FFF1FA07E998E86F7F7A27AE3"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppApplicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppApplicationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationDescription = "MVC",
                            ApplicationName = "MVC",
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 782, DateTimeKind.Utc).AddTicks(4758),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 782, DateTimeKind.Utc).AddTicks(5028),
                            ModifiedUserName = "SeedData"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppMenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AppClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MenuDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppApplicationTypeId");

                    b.HasIndex("AppClaimId");

                    b.ToTable("AppMenus");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 31, 17, 50, 46, 785, DateTimeKind.Local).AddTicks(2473),
                            CreatedUserName = "Seed Data",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 17, 50, 46, 785, DateTimeKind.Local).AddTicks(2476),
                            RoleDescription = "En yetkili kullanıcı",
                            RoleName = "Sistem Admin"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimId = 1,
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 784, DateTimeKind.Utc).AddTicks(9740),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 784, DateTimeKind.Utc).AddTicks(9741),
                            ModifiedUserName = "SeedData",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimId = 2,
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 785, DateTimeKind.Utc).AddTicks(35),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 785, DateTimeKind.Utc).AddTicks(36),
                            ModifiedUserName = "SeedData",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimId = 3,
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 785, DateTimeKind.Utc).AddTicks(38),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 785, DateTimeKind.Utc).AddTicks(38),
                            ModifiedUserName = "SeedData",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppUserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 31, 17, 50, 46, 785, DateTimeKind.Local).AddTicks(5043),
                            CreatedUserName = "Seed Data",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 17, 50, 46, 785, DateTimeKind.Local).AddTicks(5046),
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.AppEntities.AppClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimDescription = "Admin Layout içerisindeki Dashboard ın görülebilmesi için eklenmiş olan bir cliam dir.",
                            ClaimName = "Admin.Dashboard",
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 783, DateTimeKind.Utc).AddTicks(3025),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 783, DateTimeKind.Utc).AddTicks(3026),
                            ModifiedUserName = "SeedData"
                        },
                        new
                        {
                            Id = 2,
                            ClaimDescription = "Anket / Sınavlar için base modülün claim kaydıdır. ",
                            ClaimName = "Admin.Survey.BaseMenu",
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 783, DateTimeKind.Utc).AddTicks(3342),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 783, DateTimeKind.Utc).AddTicks(3343),
                            ModifiedUserName = "SeedData"
                        },
                        new
                        {
                            Id = 3,
                            ClaimDescription = "Anket / Sınavlar için Kullanıcının Kendi kartlarını görüntüleyebileceği bir claimdir.  ",
                            ClaimName = "Admin.Survey.Index",
                            CreatedDate = new DateTime(2025, 3, 31, 14, 50, 46, 783, DateTimeKind.Utc).AddTicks(3345),
                            CreatedUserName = "SeedData",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 3, 31, 14, 50, 46, 783, DateTimeKind.Utc).AddTicks(3345),
                            ModifiedUserName = "SeedData"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.AppEntities.AppToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("AppTokens");
                });

            modelBuilder.Entity("Entities.Concrete.AppEntities.AppUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Entities.Concrete.QuestionAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionPoint")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypesId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypesId");

                    b.HasIndex("SurveyQuestionsId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Entities.Concrete.QuestionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("Entities.Concrete.QuestionsMedias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QuestionsMedias");
                });

            modelBuilder.Entity("Entities.Concrete.SurveyCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppRoverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyCards");
                });

            modelBuilder.Entity("Entities.Concrete.SurveyQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutomaticCalculation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionPoints")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypesId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyCardId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypesId");

                    b.HasIndex("SurveyCardId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Entities.Concrete.SurveysForUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<int>("LastQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyCardsId")
                        .HasColumnType("int");

                    b.Property<int>("SurveysCard")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SurveyCardsId");

                    b.ToTable("SurveysForUser");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppMVCMenus", b =>
                {
                    b.HasBaseType("Core.Entities.Concrete.AppEntities.AppMenus");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNewTab")
                        .HasColumnType("bit");

                    b.Property<string>("MenuIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuOrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RootId")
                        .HasColumnType("int");

                    b.HasIndex("RootId");

                    b.ToTable("AppMVCMenus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppApplicationTypeId = 1,
                            AppClaimId = 2,
                            CreatedDate = new DateTime(2025, 3, 31, 17, 50, 46, 783, DateTimeKind.Local).AddTicks(6866),
                            CreatedUserName = "Seed Data",
                            IsActive = true,
                            MenuDescription = "Sınav Base menü",
                            MenuName = "Sınav",
                            ModifiedDate = new DateTime(2025, 3, 31, 17, 50, 46, 784, DateTimeKind.Local).AddTicks(4706),
                            ActionName = "",
                            AreaName = "",
                            ControllerName = "",
                            IsNewTab = false,
                            MenuIcon = "nav-icon fas fa-copy",
                            MenuOrderNumber = 0,
                            Parameter = ""
                        },
                        new
                        {
                            Id = 2,
                            AppApplicationTypeId = 1,
                            AppClaimId = 3,
                            CreatedDate = new DateTime(2025, 3, 31, 17, 50, 46, 784, DateTimeKind.Local).AddTicks(6392),
                            CreatedUserName = "Seed Data",
                            IsActive = true,
                            MenuDescription = "Sınav Kartları",
                            MenuName = "Sınav Kartlarını görüntüle",
                            ModifiedDate = new DateTime(2025, 3, 31, 17, 50, 46, 784, DateTimeKind.Local).AddTicks(6395),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Survey",
                            IsNewTab = false,
                            MenuIcon = "nav-icon fas fa-copy",
                            MenuOrderNumber = 0,
                            Parameter = "",
                            RootId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppMenus", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppEntities.AppApplicationType", "AppApplicationType")
                        .WithMany("AppMenus")
                        .HasForeignKey("AppApplicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.AppEntities.AppClaim", "AppClaim")
                        .WithMany("AppMenus")
                        .HasForeignKey("AppClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppApplicationType");

                    b.Navigation("AppClaim");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppRoleClaim", b =>
                {
                    b.HasOne("Entities.Concrete.AppEntities.AppClaim", "AppClaims")
                        .WithMany("AppRoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.AppEntities.AppRole", "AppRoles")
                        .WithMany("AppRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppClaims");

                    b.Navigation("AppRoles");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppUserRoles", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppEntities.AppRole", "Role")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiService.Entities.Concrete.AppEntities.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Concrete.AppEntities.AppToken", b =>
                {
                    b.HasOne("ApiService.Entities.Concrete.AppEntities.AppUser", "AppUser")
                        .WithOne("UserToken")
                        .HasForeignKey("Entities.Concrete.AppEntities.AppToken", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entities.Concrete.AppEntities.AppUserClaims", b =>
                {
                    b.HasOne("Entities.Concrete.AppEntities.AppClaim", "AppClaim")
                        .WithMany("AppUserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiService.Entities.Concrete.AppEntities.AppUser", "AppUser")
                        .WithMany("AppUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppClaim");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entities.Concrete.QuestionAnswers", b =>
                {
                    b.HasOne("Entities.Concrete.QuestionTypes", "QuestionTypes")
                        .WithMany()
                        .HasForeignKey("QuestionTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SurveyQuestions", "SurveyQuestions")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("SurveyQuestionsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionTypes");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Entities.Concrete.SurveyQuestions", b =>
                {
                    b.HasOne("Entities.Concrete.QuestionTypes", "QuestionTypes")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SurveyCards", "SurveyCard")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionTypes");

                    b.Navigation("SurveyCard");
                });

            modelBuilder.Entity("Entities.Concrete.SurveysForUser", b =>
                {
                    b.HasOne("ApiService.Entities.Concrete.AppEntities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SurveyCards", "SurveyCards")
                        .WithMany("SurveysForUsers")
                        .HasForeignKey("SurveyCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SurveyCards");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppMVCMenus", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppEntities.AppMenus", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Concrete.AppEntities.AppMVCMenus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.AppEntities.AppMVCMenus", "ParentMenu")
                        .WithMany("ChildMenus")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("ApiService.Entities.Concrete.AppEntities.AppUser", b =>
                {
                    b.Navigation("AppUserClaims");

                    b.Navigation("AppUserRoles");

                    b.Navigation("UserToken")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppApplicationType", b =>
                {
                    b.Navigation("AppMenus");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppRole", b =>
                {
                    b.Navigation("AppRoleClaims");

                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("Entities.Concrete.AppEntities.AppClaim", b =>
                {
                    b.Navigation("AppMenus");

                    b.Navigation("AppRoleClaims");

                    b.Navigation("AppUserClaims");
                });

            modelBuilder.Entity("Entities.Concrete.QuestionTypes", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Entities.Concrete.SurveyCards", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveysForUsers");
                });

            modelBuilder.Entity("Entities.Concrete.SurveyQuestions", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppEntities.AppMVCMenus", b =>
                {
                    b.Navigation("ChildMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
